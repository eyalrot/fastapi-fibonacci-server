name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y g++ cmake
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx black flake8
    
    - name: Build C++ extension
      run: |
        python setup.py build_ext --inplace
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=build
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=build
    
    - name: Format check with black
      run: |
        black --check --diff main.py test_api.py
      continue-on-error: true
    
    - name: Start FastAPI server
      run: |
        nohup python -m uvicorn main:app --host 0.0.0.0 --port 8000 > server.log 2>&1 &
        sleep 5  # Give server time to start
    
    - name: Run tests
      run: |
        python test_api.py
    
    - name: Show server logs on failure
      if: failure()
      run: |
        echo "=== Server logs ==="
        cat server.log || echo "No server logs found"
    
    - name: Create test report
      if: always()
      run: |
        echo "Python ${{ matrix.python-version }} test completed" > test-report-${{ matrix.python-version }}.txt
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: test-report-*.txt

  build-artifacts:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install wheel
    
    - name: Build C++ extension
      run: |
        python setup.py build_ext --inplace
    
    - name: Create wheel
      run: |
        python setup.py bdist_wheel
    
    - name: Upload wheel artifact
      uses: actions/upload-artifact@v4
      with:
        name: wheel-${{ matrix.os }}-py${{ matrix.python-version }}
        path: dist/*.whl
    
    - name: Upload shared library
      uses: actions/upload-artifact@v4
      with:
        name: fibonacci-cpp-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          *.so
          *.pyd
          *.dylib